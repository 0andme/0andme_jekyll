<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator>
  <link href="http://localhost:4000/tag/git-github/feed.xml" rel="self" type="application/atom+xml" />
  <link href="http://localhost:4000/" rel="alternate" type="text/html" />
  <updated>2021-11-23T01:13:15+09:00</updated>
  <id>http://localhost:4000/tag/git-github/feed.xml</id>

  
  
  

  
    <title type="html">0andme의 개발 블로그 | </title>
  

  
    <subtitle>LV.99 개발자 되기</subtitle>
  

  

  
    
      
    
  

  
  

  
    <entry>
      <title type="html">함께하는 Git/Github 팀원과 프로젝트 함께하기</title>
      <link href="http://localhost:4000/git_withTeam" rel="alternate" type="text/html" title="함께하는 Git/Github 팀원과 프로젝트 함께하기" />
      <published>2021-08-10T09:00:01+09:00</published>
      <updated>2021-08-10T09:00:01+09:00</updated>
      <id>http://localhost:4000/git_withTeam</id>
      <content type="html" xml:base="http://localhost:4000/git_withTeam">&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt;Git/Github &lt;/span&gt;&lt;/p&gt;

&lt;p class=&quot;postListBtn&quot; style=&quot;margin-top: -30px;&quot;&gt; 글 목록 펼치기&lt;/p&gt;

&lt;ul class=&quot;table-of-contents-list&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;/git_alone_1&quot;&gt; [혼자하는 Git/Github] 전체적인 흐름 알아보기 - 상&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;/git_alone_2&quot;&gt; [혼자하는 Git/Github] 전체적인 흐름 알아보기 - 하&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;/git_alone_example&quot;&gt; [혼자하는 Git/Github] 전체적인 흐름 알아보기 - 예시&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;/git_withTeam&quot;&gt; [함께하는 Git/Github] 팀원과 프로젝트 함께하기&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;script src=&quot;/assets/js/postListBtn.js&quot;&gt;&lt;/script&gt;

&lt;hr /&gt;
&lt;blockquote&gt;
  &lt;p&gt;📌모두가 다음과 같은 흐름으로 작업을 하지 않으며 개인의 작업 흐름을 정리해둔 글입니다.
git/github 사용의 전체적인 흐름을 파악하고 이해해보는 것이 목표입니다&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;📌이 글은 타인의 원격저장소와 나의 저장소(원격,로컬)를 다룹니다.
git 명령어들을 이해하고 있다는 가정하에 작성한 것입니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;윈도우 환경에서 실습을 진행 / vim 으로 커밋 메세지를 작성 / CLI 환경만 이용&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!-- excerpt-start --&gt;

&lt;h2 id=&quot;-전체적인-흐름&quot;&gt;◼ 전체적인 흐름&lt;/h2&gt;
&lt;p&gt;전체적인 흐름은 다음과 같다.&lt;/p&gt;

&lt;p&gt;간단히 말해 팀장이 프로젝트를 담을 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;메인 원격 저장소&lt;/code&gt;를 만들고 이를 팀원들이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;각자의 원격저장소&lt;/code&gt;(서브 저장소)로 복사해서 작업한 후 팀장의 원격 저장소로 모은다고 생각하면 된다.&lt;span style=&quot;color:gray&quot;&gt; 팀장을 메인 저장소의 주인이라고 쉽게 생각하면 되고 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;메인 원격 저장소&lt;/code&gt;와 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;서브 저장소&lt;/code&gt;는 쉬운 구분을 위해 이 글에서 사용하는 단어다.&lt;/span&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;예제와 함께 해보자&lt;/p&gt;

  &lt;p&gt;혼자해보는 것이라면 두개의 github계정이 있어야 한다.&lt;/p&gt;

  &lt;p&gt;또한 가상머신이나 두 대의 PC가 있어야 로그인과 로그아웃을 반복하지 않을 수 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;-공통-&quot;&gt;◼ 공통 👨‍👧‍👦&lt;/h2&gt;
&lt;h3 id=&quot;이슈-생성&quot;&gt;이슈 생성&lt;/h3&gt;

&lt;p&gt;프로젝트를 진행하면서 발생하는 모든 작업이 이슈가 될 수 있다. (기능 개발, 버그 수정, 건의사항, 업데이트 등등) 팀장과 팀원 모두가 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;메인원격저장소(팀장의 github)&lt;/code&gt;에 이슈를 생성 할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images.velog.io/images/0mi/post/efc3940b-ed05-42fe-b635-589feae6bd8e/image.png&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;-팀장-&quot;&gt;◼ 팀장 🏠&lt;/h2&gt;
&lt;h3 id=&quot;1-프로젝트를-위한-원격-저장소-만들기&quot;&gt;1. 프로젝트를 위한 원격 저장소 만들기&lt;/h3&gt;

&lt;p&gt;팀장 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0andme&lt;/code&gt;가 다음과 같이 자신의 github에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git_project&lt;/code&gt;원격 저장소를 만들고 팀원에게 해당 저장소 주소를 공유한다.
&lt;img src=&quot;https://images.velog.io/images/0mi/post/e5222613-d888-4aef-83b5-2b10fd59b66b/image.png&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;앞으로 이 저장소는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;메인 저장소&lt;/code&gt;가 되며 개개인이 작업한 결과물을 한 곳에 모으는 곳이 된다. 실습에서는 팀장이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;new&lt;/code&gt; 브랜치를 만들었고 모든 팀원은 해당 브랜치로 PR을 보내는 형태로 진행된다.&lt;/p&gt;
&lt;h3 id=&quot;2-milestone프로젝트-생성&quot;&gt;2. milestone,프로젝트 생성&lt;/h3&gt;

&lt;p&gt;팀장은  milestone과 프로젝트를 생성할 수 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Milestone 생성&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이슈들을 그룹화하는 Milestone을 생성하면 이슈들을 묶어 관리할 수 있다.
&lt;img src=&quot;https://images.velog.io/images/0mi/post/98abc717-cb6c-4a8e-a713-e09987532ed0/image.png&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h4 id=&quot;팀장의-프로젝트-생성&quot;&gt;팀장의 프로젝트 생성&lt;/h4&gt;
    &lt;p&gt;실습에는 템플릿을 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Automated kanban&lt;/code&gt;을 사용했다.
&lt;img src=&quot;https://images.velog.io/images/0mi/post/79d4b98b-891a-450c-882b-54328f771b67/image.png&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;프로젝트 탭에서 프로젝트가 잘 생성됐는지 확인해보면 아래와 같이 나타날 것이다. 템플릿을 적용한 형태이기 때문에 다른 템플릿을 골랐다면 다르게 나타날 것이다. issue 목록에서 issue 카드를 드래그 앤 드롭으로 To do, Done등으로 옮기며 작업 상황을 변경하면 된다.
&lt;img src=&quot;https://images.velog.io/images/0mi/post/6fa3829f-a137-4474-8d78-bba3c470206e/image.png&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;3-작업하기&quot;&gt;3. 작업하기&lt;/h3&gt;
&lt;p&gt;팀장은 메인 저장소가 자신의 저장소이니 자유롭게 파일을 올리면 되는데 실습에서는 팀장이 해당 프로젝트를&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;new&lt;/code&gt; 브랜치에서 작업하였다.&lt;/p&gt;

&lt;h3 id=&quot;4-승인하고-merge하기&quot;&gt;4. 승인하고 merge하기&lt;/h3&gt;
&lt;p&gt;팀장은 팀원이 보낸 PR을 확인하여 수정사항이 필요하면 코멘트를 남기거나 바로 merge를 하면 된다.&lt;/p&gt;
&lt;h3 id=&quot;5-원격-저장소의-변경사항-로컬로-가져오기&quot;&gt;5. 원격 저장소의 변경사항 로컬로 가져오기&lt;/h3&gt;
&lt;p&gt;팀원의 파일이 자신의 원격저장소에 merge되었음으로 자신의 로컬에서 작업한 내용을 push하기 전에 원격저장소의 변경사항을 받아오는 작업을 해야 충돌이 나지 않는다.
&lt;a href=&quot;https://0andme.github.io/git_alone_2&quot; target=&quot;_blank&quot;&gt; 참조 링크&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;span style=&quot;color:red&quot;&gt;git fetch&lt;/span&gt;&lt;span style=&quot;color:blue&quot;&gt; origin&lt;/span&gt;&lt;span style=&quot;color:green&quot;&gt; new&lt;/span&gt;
&lt;span style=&quot;color:red&quot;&gt;git merge&lt;/span&gt;&lt;span style=&quot;color:blue&quot;&gt;  FETCH_HEAD&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;-팀원-&quot;&gt;◼ 팀원 🏠&lt;/h2&gt;

&lt;h3 id=&quot;1-팀장의-원격-저장소-가져오기-fork&quot;&gt;1. 팀장의 원격 저장소 가져오기 fork&lt;/h3&gt;

&lt;p&gt;fork란 타겟이 되는 저장소의 사본을 가져오는 것이다. 팀장의 원격저장소에서 fork버튼을 누르고 팀원의 로컬에서 내려받으면 된다. clone과 다른 점은 fork된 저장소를 변경할 수 있다는 점이다.
팀장 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0andme&lt;/code&gt;의 원격 저장소 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git_project&lt;/code&gt;에서 오른쪽 상단의 fork버튼을 누르면 로딩 후 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;팀원 이름(0andme2) / 팀장의 원격저장소 이름(git_project)&lt;/code&gt; 형태로 팀원의 원격 저장소가 생긴다. 그리고 그 이름 아래에는 어디서 fork된 저장소인지도 나온다.
&lt;img src=&quot;https://images.velog.io/images/0mi/post/ddf77d21-a8bb-4731-ab1d-753a07ce3c29/image.png&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-새로운-브랜치에서-작업하기&quot;&gt;2. 새로운 브랜치에서 작업하기&lt;/h3&gt;
&lt;p&gt;팀원은 자신의 원격 저장소가 생겼으니 이를 로컬에서 다운 받아 작업을 시작하면 된다.
원격 저장소를 복제하고 작업한 후 결과물을 나의 원격 저장소에 push하는 것까지 아래의 흐름대로 따라 하면 된다. 간단하게 clone하기-&amp;gt; 파일 생성 등의 작업하기-&amp;gt; add하기-&amp;gt;commit하기-&amp;gt;push하기이다. &lt;a href=&quot;https://0andme.github.io/git_alone_1&quot; target=&quot;_blank&quot;&gt;참조 링크&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;팀장은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;new&lt;/code&gt;브랜치에서 작업을 하고 있다. 팀원도 동일한 브랜치에서 작업할 순 있지만 또다른 브랜치를 생성하고 나서 new브랜치로 머지한 후 PR을 보내는 것을 더 권장한다.&lt;/p&gt;

&lt;h3 id=&quot;3-pr-생성&quot;&gt;3. PR 생성&lt;/h3&gt;
&lt;p&gt;PR 퀘스트를 보낼 때 한번 더 확인해봐야하는 것은 아래와 같이 팀원의 원격저장소의 어떤 브랜치를 팀장의 원격저장소의 어떤 브랜치로의 merge를 요청하는지이다. 실습에서 팀장의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;new&lt;/code&gt;브랜치로 merge하기로 하였으므로 이를 확인하고 보내면 된다. &lt;span style=&quot;color:gray&quot;&gt;대부분 잘 정해져있다.&lt;/span&gt; &lt;strong&gt;이때 코멘트를 작성하는 부분에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#&lt;/code&gt;을 작성하면 자동으로 현재 생성된 이슈목록들이 나온다.&lt;/strong&gt; 목록 중에서 현재 merge를 요청한 작업이 어떤 이슈에 대한 작업물인지 찾아 클릭하면 된다. 실습에서는 이슈번호가 5였다. &lt;a href=&quot;https://0andme.github.io/git_alone_2&quot; target=&quot;_blank&quot;&gt; PR 생성 참조 링크&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://media.vlpt.us/images/0mi/post/65b1e51d-7ecb-4937-b68a-b512f6d74250/image.png&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;4-메인-원격-저장소의-변경사항-받아오기&quot;&gt;4. 메인 원격 저장소의 변경사항 받아오기&lt;/h3&gt;

&lt;p&gt;PR이 승인되면 팀장의 원격저장소의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;new&lt;/code&gt;브랜치의 변경사항이 생기게 된다. 다음 작업을 위해선 팀장과 마찬가지로 팀원도 이를 자신의 로컬저장소로 가져오는 작업이 필요하다.&lt;/p&gt;
&lt;h4 id=&quot;1upstream-추가하기&quot;&gt;1.&lt;strong&gt;upstream 추가하기&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;PR을 생성하려고 하거나 혹은 생성했는데 충돌로 인해 merge가 되지 않는다고 나온다면 팀장의 원격 저장소의 변경사항을 로컬로 가져와서 작업한 후 PR을 요청했던 나의 원격저장소로 push해주면 된다. 이때 새로운 원격 저장소를 추가해줘야 한다. 이때 나오는 개념이 upstream이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images.velog.io/images/0mi/post/8f985894-7282-4cc6-a2a3-509112eb76b5/image.png&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;간단히 말하면 나의 로컬 저장소에서 봤을때&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fork한 남의 저장소&lt;/code&gt;가&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;upstream&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;내 원격저장소&lt;/code&gt;가 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;origin&lt;/code&gt;인 것이다.&lt;/p&gt;

&lt;p&gt;실습예제 상황에서 봤을 때, 팀원&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0andme2&lt;/code&gt;의 로컬 저장소 입장에서 팀장&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0andme&lt;/code&gt;의 원격 저장소는&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;upstream&lt;/code&gt;, 팀원의&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;내 원격저장소&lt;/code&gt;가 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;origin&lt;/code&gt;인 것이다.&lt;/p&gt;

&lt;p&gt;먼저 아래의 git명령어로 현재 로컬 저장소와 연결된 원격 저장소 목록을 확인해볼 수 있다.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;span style=&quot;color:red&quot;&gt;git remote&lt;/span&gt;&lt;span style=&quot;color:blue&quot;&gt; -v &lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;upstream에 해당되는 주소가 없다면 아래의 명령어로 추가하면 된다. 이때 ‘upstream’은 별칭이기 때문에 다른 별칭을 사용해도 되지만 통상적으로 upstream이라고 이름붙인다.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;span style=&quot;color:red&quot;&gt;git remote add upstream &lt;/span&gt;&lt;span style=&quot;color:blue&quot;&gt;[타인의 원격저장소 주소]&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;2-변경사항-받아오기&quot;&gt;2. 변경사항 받아오기&lt;/h4&gt;
&lt;p&gt;팀장의 원격 저장소의 변경사항을 가져오는 것이기 때문에 origin이 아닌 upstream의 new 브랜치에서 변경사항을 가져와야 한다는 것을 알면 된다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;span style=&quot;color:red&quot;&gt;git fetch&lt;/span&gt;&lt;span style=&quot;color:blue&quot;&gt; upstream&lt;/span&gt;&lt;span style=&quot;color:green&quot;&gt; new&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;span style=&quot;color:red&quot;&gt;git merge&lt;/span&gt;&lt;span style=&quot;color:blue&quot;&gt;  FETCH_HEAD&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;</content>

      
      
      
      
      

      <author>
          <name>0andme</name>
        
        
      </author>

      

      
        <category term="git-github" />
      

      
        <summary type="html">Git/Github 글 목록 펼치기 [혼자하는 Git/Github] 전체적인 흐름 알아보기 - 상 [혼자하는 Git/Github] 전체적인 흐름 알아보기 - 하 [혼자하는 Git/Github] 전체적인 흐름 알아보기 - 예시 [함께하는 Git/Github] 팀원과 프로젝트 함께하기 📌모두가 다음과 같은 흐름으로 작업을 하지 않으며 개인의 작업 흐름을 정리해둔 글입니다. git/github 사용의 전체적인 흐름을 파악하고 이해해보는 것이 목표입니다 📌이 글은 타인의 원격저장소와 나의 저장소(원격,로컬)를 다룹니다. git 명령어들을 이해하고 있다는 가정하에 작성한 것입니다. 윈도우 환경에서 실습을 진행 / vim 으로 커밋 메세지를 작성 / CLI 환경만 이용 ◼ 전체적인 흐름 전체적인 흐름은 다음과 같다. 간단히 말해 팀장이 프로젝트를 담을 메인 원격 저장소를 만들고 이를 팀원들이 각자의 원격저장소(서브 저장소)로 복사해서 작업한 후 팀장의 원격 저장소로 모은다고 생각하면 된다. 팀장을 메인 저장소의 주인이라고 쉽게 생각하면 되고 메인 원격 저장소와 서브 저장소는 쉬운 구분을 위해 이 글에서 사용하는 단어다. 예제와 함께 해보자 혼자해보는 것이라면 두개의 github계정이 있어야 한다. 또한 가상머신이나 두 대의 PC가 있어야 로그인과 로그아웃을 반복하지 않을 수 있다. ◼ 공통 👨‍👧‍👦 이슈 생성 프로젝트를 진행하면서 발생하는 모든 작업이 이슈가 될 수 있다. (기능 개발, 버그 수정, 건의사항, 업데이트 등등) 팀장과 팀원 모두가 메인원격저장소(팀장의 github)에 이슈를 생성 할 수 있다. ◼ 팀장 🏠 1. 프로젝트를 위한 원격 저장소 만들기 팀장 0andme가 다음과 같이 자신의 github에 git_project원격 저장소를 만들고 팀원에게 해당 저장소 주소를 공유한다. 앞으로 이 저장소는 메인 저장소가 되며 개개인이 작업한 결과물을 한 곳에 모으는 곳이 된다. 실습에서는 팀장이 new 브랜치를 만들었고 모든 팀원은 해당 브랜치로 PR을 보내는 형태로 진행된다. 2. milestone,프로젝트 생성 팀장은 milestone과 프로젝트를 생성할 수 있다. Milestone 생성 이슈들을 그룹화하는 Milestone을 생성하면 이슈들을 묶어 관리할 수 있다. 팀장의 프로젝트 생성 실습에는 템플릿을 Automated kanban을 사용했다. 프로젝트 탭에서 프로젝트가 잘 생성됐는지 확인해보면 아래와 같이 나타날 것이다. 템플릿을 적용한 형태이기 때문에 다른 템플릿을 골랐다면 다르게 나타날 것이다. issue 목록에서 issue 카드를 드래그 앤 드롭으로 To do, Done등으로 옮기며 작업 상황을 변경하면 된다. 3. 작업하기 팀장은 메인 저장소가 자신의 저장소이니 자유롭게 파일을 올리면 되는데 실습에서는 팀장이 해당 프로젝트를new 브랜치에서 작업하였다. 4. 승인하고 merge하기 팀장은 팀원이 보낸 PR을 확인하여 수정사항이 필요하면 코멘트를 남기거나 바로 merge를 하면 된다. 5. 원격 저장소의 변경사항 로컬로 가져오기 팀원의 파일이 자신의 원격저장소에 merge되었음으로 자신의 로컬에서 작업한 내용을 push하기 전에 원격저장소의 변경사항을 받아오는 작업을 해야 충돌이 나지 않는다. 참조 링크 git fetch origin new git merge FETCH_HEAD ◼ 팀원 🏠 1. 팀장의 원격 저장소 가져오기 fork fork란 타겟이 되는 저장소의 사본을 가져오는 것이다. 팀장의 원격저장소에서 fork버튼을 누르고 팀원의 로컬에서 내려받으면 된다. clone과 다른 점은 fork된 저장소를 변경할 수 있다는 점이다. 팀장 0andme의 원격 저장소 git_project에서 오른쪽 상단의 fork버튼을 누르면 로딩 후 팀원 이름(0andme2) / 팀장의 원격저장소 이름(git_project) 형태로 팀원의 원격 저장소가 생긴다. 그리고 그 이름 아래에는 어디서 fork된 저장소인지도 나온다. 2. 새로운 브랜치에서 작업하기 팀원은 자신의 원격 저장소가 생겼으니 이를 로컬에서 다운 받아 작업을 시작하면 된다. 원격 저장소를 복제하고 작업한 후 결과물을 나의 원격 저장소에 push하는 것까지 아래의 흐름대로 따라 하면 된다. 간단하게 clone하기-&amp;gt; 파일 생성 등의 작업하기-&amp;gt; add하기-&amp;gt;commit하기-&amp;gt;push하기이다. 참조 링크 팀장은 new브랜치에서 작업을 하고 있다. 팀원도 동일한 브랜치에서 작업할 순 있지만 또다른 브랜치를 생성하고 나서 new브랜치로 머지한 후 PR을 보내는 것을 더 권장한다. 3. PR 생성 PR 퀘스트를 보낼 때 한번 더 확인해봐야하는 것은 아래와 같이 팀원의 원격저장소의 어떤 브랜치를 팀장의 원격저장소의 어떤 브랜치로의 merge를 요청하는지이다. 실습에서 팀장의 new브랜치로 merge하기로 하였으므로 이를 확인하고 보내면 된다. 대부분 잘 정해져있다. 이때 코멘트를 작성하는 부분에 #을 작성하면 자동으로 현재 생성된 이슈목록들이 나온다. 목록 중에서 현재 merge를 요청한 작업이 어떤 이슈에 대한 작업물인지 찾아 클릭하면 된다. 실습에서는 이슈번호가 5였다. PR 생성 참조 링크 4. 메인 원격 저장소의 변경사항 받아오기 PR이 승인되면 팀장의 원격저장소의 new브랜치의 변경사항이 생기게 된다. 다음 작업을 위해선 팀장과 마찬가지로 팀원도 이를 자신의 로컬저장소로 가져오는 작업이 필요하다. 1.upstream 추가하기 PR을 생성하려고 하거나 혹은 생성했는데 충돌로 인해 merge가 되지 않는다고 나온다면 팀장의 원격 저장소의 변경사항을 로컬로 가져와서 작업한 후 PR을 요청했던 나의 원격저장소로 push해주면 된다. 이때 새로운 원격 저장소를 추가해줘야 한다. 이때 나오는 개념이 upstream이다. 간단히 말하면 나의 로컬 저장소에서 봤을때fork한 남의 저장소가upstream, 내 원격저장소가 origin인 것이다. 실습예제 상황에서 봤을 때, 팀원0andme2의 로컬 저장소 입장에서 팀장0andme의 원격 저장소는upstream, 팀원의내 원격저장소가 origin인 것이다. 먼저 아래의 git명령어로 현재 로컬 저장소와 연결된 원격 저장소 목록을 확인해볼 수 있다. git remote -v upstream에 해당되는 주소가 없다면 아래의 명령어로 추가하면 된다. 이때 ‘upstream’은 별칭이기 때문에 다른 별칭을 사용해도 되지만 통상적으로 upstream이라고 이름붙인다. git remote add upstream [타인의 원격저장소 주소] 2. 변경사항 받아오기 팀장의 원격 저장소의 변경사항을 가져오는 것이기 때문에 origin이 아닌 upstream의 new 브랜치에서 변경사항을 가져와야 한다는 것을 알면 된다. git fetch upstream new git merge FETCH_HEAD</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">혼자하는 Git/Github 전체적인 흐름 알아보기 - 예시</title>
      <link href="http://localhost:4000/git_alone_example" rel="alternate" type="text/html" title="혼자하는 Git/Github 전체적인 흐름 알아보기 - 예시" />
      <published>2021-08-01T09:00:01+09:00</published>
      <updated>2021-08-01T09:00:01+09:00</updated>
      <id>http://localhost:4000/git_alone_example</id>
      <content type="html" xml:base="http://localhost:4000/git_alone_example">&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt;Git/Github &lt;/span&gt;&lt;/p&gt;

&lt;p class=&quot;postListBtn&quot; style=&quot;margin-top: -30px;&quot;&gt; 글 목록 펼치기&lt;/p&gt;

&lt;ul class=&quot;table-of-contents-list&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;/git_alone_1&quot;&gt; [혼자하는 Git/Github] 전체적인 흐름 알아보기 - 상&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;/git_alone_2&quot;&gt; [혼자하는 Git/Github] 전체적인 흐름 알아보기 - 하&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;/git_alone_example&quot;&gt; [혼자하는 Git/Github] 전체적인 흐름 알아보기 - 예시&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;/git_withTeam&quot;&gt; [함께하는 Git/Github] 팀원과 프로젝트 함께하기&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;script src=&quot;/assets/js/postListBtn.js&quot;&gt;&lt;/script&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;예시&quot;&gt;예시&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/images/0mi/post/044f5d46-0af8-45a9-ac80-a693d95a63a4/image.png&quot; /&gt; &lt;a href=&quot;https://images.velog.io/images/0mi/post/044f5d46-0af8-45a9-ac80-a693d95a63a4/image.png&quot; target=&quot;_blank&quot;&gt;위의 이미지 크게 보기&lt;/a&gt;&lt;/p&gt;

&lt;!-- excerpt-start --&gt;

&lt;p&gt;위와 같은 흐름대로 진행됩니다.&lt;/p&gt;

&lt;h3 id=&quot;1-clone&quot;&gt;1. Clone&lt;/h3&gt;
&lt;h4 id=&quot;문서-폴더의-dev폴더에-gitex-저장소-복제해오기&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;문서&lt;/code&gt; 폴더의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dev&lt;/code&gt;폴더에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gitex&lt;/code&gt; 저장소 복제해오기&lt;/h4&gt;

&lt;p&gt;1-1. 원격 저장소 gitex의 주소를 복사&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images.velog.io/images/0mi/post/5e8ab1ad-7798-4e8c-bcef-6546e3013758/image.png&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;1-2. 문서/dev폴더에서 마우스 오른쪽 클릭 후 git bash Here 클릭&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images.velog.io/images/0mi/post/430a2249-a4cf-4f0f-8033-416fd2a0a645/image.png&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;1-3. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git clone 원격저장소 gitex의 주소&lt;/code&gt; 입력&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images.velog.io/images/0mi/post/51a101a2-c06a-411c-b59d-f3a9cf1e4173/image.png&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;1-4. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cd&lt;/code&gt;명령어를 이용하여 로컬 저장소 폴더로 이동&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images.velog.io/images/0mi/post/861b9392-90b7-4d96-a7a3-01e7e744b5ad/image.png&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;2-branch와-checkout&quot;&gt;2. branch와 checkout&lt;/h3&gt;
&lt;h4 id=&quot;로컬-저장소에-새로운-branch-new-branch-생성-하고-이동하기&quot;&gt;로컬 저장소에 새로운 branch new branch &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;생성&lt;/code&gt; 하고 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;이동&lt;/code&gt;하기&lt;/h4&gt;

&lt;p&gt;2-1. 브랜치 생성하기&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images.velog.io/images/0mi/post/835c9969-cd43-4127-91b1-804cccc57d8e/image.png&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;2-2. 브랜치로 이동하기
&lt;img src=&quot;https://images.velog.io/images/0mi/post/30239dc1-39a9-470c-b44c-c5726e2c26e3/image.png&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;3-add와-commit&quot;&gt;3. add와 commit&lt;/h3&gt;
&lt;h4 id=&quot;readmemd-수정하고-add와-commit하기&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;README.md&lt;/code&gt; 수정하고 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;add&lt;/code&gt;와 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;commit&lt;/code&gt;하기&lt;/h4&gt;

&lt;p&gt;3-1. 파일 수정하기&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;color:gray&quot;&gt;나의 경우 vim 에디터에서 가볍게 수정하였고 아래의 내용을 작성하였다.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images.velog.io/images/0mi/post/6bdfb83f-031d-4b9b-80ee-77dbf4180314/image.png&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;3-2. add 하기&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images.velog.io/images/0mi/post/fc8ac539-5c6e-4a48-8817-04ca0b0ef0b9/image.png&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;3-3. commit하기&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images.velog.io/images/0mi/post/fb6612f1-96ac-449b-afc1-9a77ade483a5/image.png&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;4-push&quot;&gt;4. push&lt;/h3&gt;
&lt;h4 id=&quot;원격저장소에-로컬-브랜치-new를-push하기&quot;&gt;원격저장소에 로컬 브랜치 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;new&lt;/code&gt;를 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;push&lt;/code&gt;하기&lt;/h4&gt;

&lt;p&gt;4-1. push하기&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images.velog.io/images/0mi/post/870353df-6649-4778-9ea0-cbe074d18264/image.png&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;4-2. 확인해보기&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images.velog.io/images/0mi/post/4094aa55-ebc2-4765-89ef-107307b3c37d/image.png&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;github의 원격저장소로 가서 위의 버튼을 누르면 현재 브랜치들이 나오는데 new브랜치가 있는 것을 확인할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images.velog.io/images/0mi/post/dd2f1a85-0915-48d5-b7be-d3d0dd883783/image.png&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;new 브랜치를 클릭하면 로컬에서 변경한 작업이 원격 저장소에도 반영되었음을 알 수 있다.
&lt;img src=&quot;https://images.velog.io/images/0mi/post/a52e2bb8-0f1a-4fea-b017-aeffc240ed08/image.png&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;5-pr-보내기&quot;&gt;5. PR 보내기&lt;/h3&gt;
&lt;p&gt;5-1. github에서 풀리퀘스트를 생성한다. 어떤 브랜치를 어디에 병합하는지 확인하고 적절한 멘트를 작성한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images.velog.io/images/0mi/post/f9505cf3-f628-4bdc-8224-7106d88eca36/image.png&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;5-2. merge를 하고자 하면 아래 이미지의 버튼을 누른다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images.velog.io/images/0mi/post/65224e53-38af-4158-a8d2-495d72c3ae4f/image.png&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;6-pull과-fetchmerge로-충돌-해결하기&quot;&gt;6. pull과 fetch+merge로 충돌 해결하기&lt;/h3&gt;

&lt;p&gt;6.1 로컬에서 push할때의 충돌 해결하기
충돌 상황을 만들기 위해 아래와 같이 github의 new 브랜치에서 README.md파일을 변경하였다.
&lt;img src=&quot;https://images.velog.io/images/0mi/post/bcc510d8-3d83-4eb1-a9b4-51969989ad9e/image.png&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;로컬 new 브랜치에서도 아래와 같이 README.md파일을 변경하고 add, commit, push를 진행하면 충돌이 나며 push가 거절된다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images.velog.io/images/0mi/post/ce36cbc1-f817-4025-9c21-470571f5f5a8/image.png&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;아래의 명령어로 원격 저장소의 브랜치 new의 변경사항을 로컬로 가져와 병합까지 진행한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images.velog.io/images/0mi/post/38ed34b9-c64c-4a44-8149-a796907fd997/image.png&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;다시 파일을 열어 수정한 후  add, commit, push를 차례대로 다시 하면 된다. &lt;span style=&quot;color:gray&quot;&gt;아래는 로컬에서 README.md 파일을 다시 열어 수정한 것이다.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images.velog.io/images/0mi/post/75446f9b-88ff-477d-a19b-3211680d28de/image.png&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;github으로 돌아가 병합하여 수정한 파일이 제대로 올라갔는지 확인하면 된다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images.velog.io/images/0mi/post/1145b8e5-36ea-455b-97a5-42b8cc5d39ef/image.png&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;6.2 PR에서 충돌 해결하기
충돌상황을 만들기 위해 아래와 같이 github의 main브랜치에서 README.md파일을 변경하였다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images.velog.io/images/0mi/post/d025b2d8-7d13-4efe-a592-f1ad818fc103/image.png&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;PR을 생성하고 보니 아래와 같이 README.md 파일에서 충돌이 있음을 알 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images.velog.io/images/0mi/post/52edfe2b-c373-46ce-8cb4-c98b11b06a47/image.png&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이를 해결하기 위해 로컬에서 main의 변경사항을 가져온다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images.velog.io/images/0mi/post/82d5aaf6-3e52-45c3-9c0a-ea4e4ad3f428/image.png&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;충돌이 일어났던 README.md 파일을 수정하고 다시 add, commit, push를 차례대로 다시 한다. push할때 main이 아닌 PR을 보낸 브랜치로 보내야 한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images.velog.io/images/0mi/post/7534af96-9ff0-4352-a83c-a29723755589/image.png&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>0andme</name>
        
        
      </author>

      

      
        <category term="git-github" />
      

      
        <summary type="html">Git/Github 글 목록 펼치기 [혼자하는 Git/Github] 전체적인 흐름 알아보기 - 상 [혼자하는 Git/Github] 전체적인 흐름 알아보기 - 하 [혼자하는 Git/Github] 전체적인 흐름 알아보기 - 예시 [함께하는 Git/Github] 팀원과 프로젝트 함께하기 예시 위의 이미지 크게 보기 위와 같은 흐름대로 진행됩니다. 1. Clone 문서 폴더의 dev폴더에 gitex 저장소 복제해오기 1-1. 원격 저장소 gitex의 주소를 복사 1-2. 문서/dev폴더에서 마우스 오른쪽 클릭 후 git bash Here 클릭 1-3. git clone 원격저장소 gitex의 주소 입력 1-4. cd명령어를 이용하여 로컬 저장소 폴더로 이동 2. branch와 checkout 로컬 저장소에 새로운 branch new branch 생성 하고 이동하기 2-1. 브랜치 생성하기 2-2. 브랜치로 이동하기 3. add와 commit README.md 수정하고 add와 commit하기 3-1. 파일 수정하기 나의 경우 vim 에디터에서 가볍게 수정하였고 아래의 내용을 작성하였다. 3-2. add 하기 3-3. commit하기 4. push 원격저장소에 로컬 브랜치 new를 push하기 4-1. push하기 4-2. 확인해보기 github의 원격저장소로 가서 위의 버튼을 누르면 현재 브랜치들이 나오는데 new브랜치가 있는 것을 확인할 수 있다. new 브랜치를 클릭하면 로컬에서 변경한 작업이 원격 저장소에도 반영되었음을 알 수 있다. 5. PR 보내기 5-1. github에서 풀리퀘스트를 생성한다. 어떤 브랜치를 어디에 병합하는지 확인하고 적절한 멘트를 작성한다. 5-2. merge를 하고자 하면 아래 이미지의 버튼을 누른다. 6. pull과 fetch+merge로 충돌 해결하기 6.1 로컬에서 push할때의 충돌 해결하기 충돌 상황을 만들기 위해 아래와 같이 github의 new 브랜치에서 README.md파일을 변경하였다. 로컬 new 브랜치에서도 아래와 같이 README.md파일을 변경하고 add, commit, push를 진행하면 충돌이 나며 push가 거절된다. 아래의 명령어로 원격 저장소의 브랜치 new의 변경사항을 로컬로 가져와 병합까지 진행한다. 다시 파일을 열어 수정한 후 add, commit, push를 차례대로 다시 하면 된다. 아래는 로컬에서 README.md 파일을 다시 열어 수정한 것이다. github으로 돌아가 병합하여 수정한 파일이 제대로 올라갔는지 확인하면 된다. 6.2 PR에서 충돌 해결하기 충돌상황을 만들기 위해 아래와 같이 github의 main브랜치에서 README.md파일을 변경하였다. PR을 생성하고 보니 아래와 같이 README.md 파일에서 충돌이 있음을 알 수 있다. 이를 해결하기 위해 로컬에서 main의 변경사항을 가져온다. 충돌이 일어났던 README.md 파일을 수정하고 다시 add, commit, push를 차례대로 다시 한다. push할때 main이 아닌 PR을 보낸 브랜치로 보내야 한다.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">혼자하는 Git/Github 전체적인 흐름 알아보기 - 하</title>
      <link href="http://localhost:4000/git_alone_2" rel="alternate" type="text/html" title="혼자하는 Git/Github 전체적인 흐름 알아보기 - 하" />
      <published>2021-08-01T09:00:00+09:00</published>
      <updated>2021-08-01T09:00:00+09:00</updated>
      <id>http://localhost:4000/git_alone_2</id>
      <content type="html" xml:base="http://localhost:4000/git_alone_2">&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt;Git/Github &lt;/span&gt;&lt;/p&gt;

&lt;p class=&quot;postListBtn&quot; style=&quot;margin-top: -30px;&quot;&gt; 글 목록 펼치기&lt;/p&gt;

&lt;ul class=&quot;table-of-contents-list&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;/git_alone_1&quot;&gt; [혼자하는 Git/Github] 전체적인 흐름 알아보기 - 상&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;/git_alone_2&quot;&gt; [혼자하는 Git/Github] 전체적인 흐름 알아보기 - 하&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;/git_alone_example&quot;&gt; [혼자하는 Git/Github] 전체적인 흐름 알아보기 - 예시&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;/git_withTeam&quot;&gt; [함께하는 Git/Github] 팀원과 프로젝트 함께하기&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;script src=&quot;/assets/js/postListBtn.js&quot;&gt;&lt;/script&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;5-풀리퀘스트-prpull-request보내기&quot;&gt;5. 풀리퀘스트 PR(pull request)보내기&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://images.velog.io/images/0mi/post/71ff8088-31da-49ab-b284-0e5a740f0179/image.png&quot; /&gt; &lt;a href=&quot;https://images.velog.io/images/0mi/post/71ff8088-31da-49ab-b284-0e5a740f0179/image.png&quot; target=&quot;_blank&quot;&gt; 이미지 크게 보기&lt;/a&gt;&lt;/p&gt;

&lt;!-- excerpt-start --&gt;

&lt;p&gt;원격 저장소의 하위 브랜치에서 원격 저장소의 상위 브랜치로의 merge를 요청하는 것을 풀리퀘스트 PR(pull request)이라고 한다.&lt;/p&gt;

&lt;p&gt;풀리퀘스트를 생성하는 방법은 아래와 같다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.1&lt;/strong&gt;
로컬 브랜치에서 원격 저장소에 push하고 나면 아래의 이미지와 같이 github에 자동으로 나타나는 PR 생성 창을 누르거나
   &lt;img src=&quot;https://images.velog.io/images/0mi/post/b5ad13e0-65eb-44b4-a98d-231d1dd21227/image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.2&lt;/strong&gt;
Pull requests -&amp;gt; new pull request 버튼을 누른다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images.velog.io/images/0mi/post/c61a88a3-6ebc-4e92-8d5e-fdea62846605/image.png&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2&lt;/strong&gt;
하위 브랜치와 상위 브랜치가 무엇인지 한 번 더 확인하고 create pull request버튼을 누른다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images.velog.io/images/0mi/post/5ce82172-8786-4981-a8fc-89a177a4a563/image.png&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3&lt;/strong&gt;
적절한 PR comment를 남기고 create pull request버튼을 누르면 풀리퀘스트가 만들어진다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images.velog.io/images/0mi/post/252fb462-55af-444f-a153-b1230a80bfb7/image.png&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4&lt;/strong&gt;
&lt;span style=&quot;color:gray&quot;&gt;현재 원격 저장소를 혼자 사용하고 있다고 가정하고 있으므로&lt;/span&gt; merge를 하기 위해서 아래의 사진과 같은 merge pull request버튼을 누르면 된다.&lt;span style=&quot;color:gray&quot;&gt; 팀원과 함께 개발하고 있다면 팀원의 승인 이후 merge해야할 것이다. merge는 본인이 해도 되고 팀원이 해도 된다. &lt;/span&gt;
   &lt;img src=&quot;https://images.velog.io/images/0mi/post/e0c5a33a-23e8-476a-bf2c-a05e98f6d613/image.png&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;6-원격-저장소의-변경-사항-내려받고-병합하기--fetch--merge-와-pull&quot;&gt;6. 원격 저장소의 변경 사항 내려받고 병합하기 : fetch + merge 와 pull&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://images.velog.io/images/0mi/post/293f3e87-8681-47c6-bc32-2e42bc768408/image.png&quot; /&gt;&lt;a href=&quot;https://images.velog.io/images/0mi/post/293f3e87-8681-47c6-bc32-2e42bc768408/image.png&quot; target=&quot;_blank&quot;&gt;위의 이미지 크게 보기&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;언제-변경-사항을-받아올까&quot;&gt;언제 변경 사항을 받아올까?&lt;/h4&gt;
&lt;p&gt;원격 저장소에 변경이 있을 때 변경 사항을 받아오게 되는데 나의 경우엔 주로 &lt;span style=&quot;color:red&quot;&gt;충돌이 일어날 때&lt;/span&gt; 변경사항이 있음을 알게 된다.&lt;/p&gt;

&lt;h4 id=&quot;언제-충돌이-일어날까&quot;&gt;언제 충돌이 일어날까&lt;/h4&gt;
&lt;p&gt;로컬에서 push할 때와 풀리퀘스트 생성시 충돌을 겪을 수 있다. 만약, 혼자 사용하는 원격 저장소인데 충돌이 일어났다면 github에서 직접 파일을 변경한 이력이 있을 것이다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;로컬에서 push 할 때의 충돌 확인&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://images.velog.io/images/0mi/post/377f01e0-e1d8-4df8-899b-5f4f860181a7/image.png&quot; width=&quot;95%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위의 이미지는 원격 저장소의 new브랜치에서 변경사항이 일어나 로컬의 new 브랜치에서 push가 거절되었을 때의 메시지이다. &lt;span style=&quot;color:gray&quot;&gt;아래의 메시지를 잘 보면 push가 거절된 힌트를 엄청 친절하게 주고 있다는 것을 알 수 있다. 거절의 이유와 해결법까지 알려주고 있다.&lt;/span&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;풀리 퀘스트에서의 충돌 확인&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://images.velog.io/images/0mi/post/bdf95e24-decd-46b0-8f06-177ef2e9210e/image.png&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위의 사진은  원격 저장소의 new 브랜치의 내용을 원격 저장소의 main브랜치에 병합하고자 pr을 보냈을때 충돌이 일어났음을 보여준다. 풀리퀘스트 생성 전과 후에 모두 충돌이 일어났음을 github에서 미리 알려주고 있다.&lt;/p&gt;

&lt;h4 id=&quot;어떻게-충돌을-해결하는가&quot;&gt;어떻게 충돌을 해결하는가&lt;/h4&gt;
&lt;p&gt;변경사항이 있는 원격저장소의 branch를 로컬로 다운 받고 병합하여 수정 후 다시 add와 commit, push를 수행하면 된다.&lt;/p&gt;

&lt;p&gt;변경사항이 있는 원격저장소의 branch를 가져오는 방법은 &lt;span style=&quot;color:red&quot;&gt;두 가지&lt;/span&gt;가 있다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fetch&lt;/code&gt;와 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;merge&lt;/code&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;fetch 명령어를 입력하면 FETCH_HEAD 라는 임시 브랜치에 원격저장소의 브랜치의 변경사항이 저장된다. 현재 브랜치에 변경사항을 바로 적용하고 싶지 않을 때 사용하면 된다.&lt;/li&gt;
      &lt;li&gt;FETCH_HEAD에 가져온 내용을 현재 브랜치와 병합하기 위해 merge명령어를 수행한다.
        &lt;blockquote&gt;
          &lt;p&gt;&lt;span style=&quot;color:red&quot;&gt;git fetch origin &lt;/span&gt;&lt;span style=&quot;color:blue&quot;&gt;브랜치명&lt;/span&gt;&lt;/p&gt;
        &lt;/blockquote&gt;

        &lt;blockquote&gt;
          &lt;p&gt;&lt;span style=&quot;color:red&quot;&gt;git merge&lt;/span&gt; &lt;span style=&quot;color:blue&quot;&gt;FETCH_HEAD&lt;/span&gt;&lt;/p&gt;
        &lt;/blockquote&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pull&lt;/code&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;pull 명령어는 fetch와 merge 명령어를 수행한  것과 같다. merge를 자동으로 하고 싶을 때 사용하면 된다.
        &lt;blockquote&gt;
          &lt;p&gt;&lt;span style=&quot;color:red&quot;&gt;git pull origin &lt;/span&gt;&lt;span style=&quot;color:blue&quot;&gt;브랜치명&lt;/span&gt;&lt;/p&gt;
        &lt;/blockquote&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;위의 두가지 방법 중 하나로 병합을 하고 파일을 열면 변경사항이 파일에 표시된다. 로컬저장소에서 작성한 부분과 원격 저장소에서 작성한 부분을 구분하는 부분이 아래와 같이 표시된다. 적절히 변경한 후 저장하면 된다.
&lt;img src=&quot;https://images.velog.io/images/0mi/post/1a23f167-5d00-4458-9357-fbfb94607aa7/image.png&quot; /&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;파일이 변경되었기 때문에 바로 push하는 것이 아니라  &lt;span style=&quot;color:red&quot;&gt;add와 commit을 하고 &lt;/span&gt; push하면 충돌이 해결된다. PR에서도 아래와 같이 바뀌면 충돌이 해결된 것이다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://images.velog.io/images/0mi/post/044017e4-ddf3-4869-bc94-9a7ed09853ba/image.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;PR에서의 충돌을 해결할 때 짚고 넘어가야 하는 것은 main브랜치의 변경 사항을 받아왔다고 해서 &lt;span style=&quot;color:red&quot;&gt;main에 다시 push하는 것이 아니라는 것&lt;/span&gt;이다. 원격 저장소의 하위 브랜치에서 main으로 병합을 요청한 상태이니 하위 브랜치로 push해야한다. &lt;span style=&quot;color:gray&quot;&gt; 풀리 퀘스트를 사용하지 않고 하위 브랜치 따위가 상위 브랜치에 뭔가를 올리려고 하지말자&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>0andme</name>
        
        
      </author>

      

      
        <category term="git-github" />
      

      
        <summary type="html">Git/Github 글 목록 펼치기 [혼자하는 Git/Github] 전체적인 흐름 알아보기 - 상 [혼자하는 Git/Github] 전체적인 흐름 알아보기 - 하 [혼자하는 Git/Github] 전체적인 흐름 알아보기 - 예시 [함께하는 Git/Github] 팀원과 프로젝트 함께하기 5. 풀리퀘스트 PR(pull request)보내기 이미지 크게 보기 원격 저장소의 하위 브랜치에서 원격 저장소의 상위 브랜치로의 merge를 요청하는 것을 풀리퀘스트 PR(pull request)이라고 한다. 풀리퀘스트를 생성하는 방법은 아래와 같다. 1.1 로컬 브랜치에서 원격 저장소에 push하고 나면 아래의 이미지와 같이 github에 자동으로 나타나는 PR 생성 창을 누르거나 1.2 Pull requests -&amp;gt; new pull request 버튼을 누른다. 2 하위 브랜치와 상위 브랜치가 무엇인지 한 번 더 확인하고 create pull request버튼을 누른다. 3 적절한 PR comment를 남기고 create pull request버튼을 누르면 풀리퀘스트가 만들어진다. 4 현재 원격 저장소를 혼자 사용하고 있다고 가정하고 있으므로 merge를 하기 위해서 아래의 사진과 같은 merge pull request버튼을 누르면 된다. 팀원과 함께 개발하고 있다면 팀원의 승인 이후 merge해야할 것이다. merge는 본인이 해도 되고 팀원이 해도 된다. 6. 원격 저장소의 변경 사항 내려받고 병합하기 : fetch + merge 와 pull 위의 이미지 크게 보기 언제 변경 사항을 받아올까? 원격 저장소에 변경이 있을 때 변경 사항을 받아오게 되는데 나의 경우엔 주로 충돌이 일어날 때 변경사항이 있음을 알게 된다. 언제 충돌이 일어날까 로컬에서 push할 때와 풀리퀘스트 생성시 충돌을 겪을 수 있다. 만약, 혼자 사용하는 원격 저장소인데 충돌이 일어났다면 github에서 직접 파일을 변경한 이력이 있을 것이다. 로컬에서 push 할 때의 충돌 확인 위의 이미지는 원격 저장소의 new브랜치에서 변경사항이 일어나 로컬의 new 브랜치에서 push가 거절되었을 때의 메시지이다. 아래의 메시지를 잘 보면 push가 거절된 힌트를 엄청 친절하게 주고 있다는 것을 알 수 있다. 거절의 이유와 해결법까지 알려주고 있다. 풀리 퀘스트에서의 충돌 확인 위의 사진은 원격 저장소의 new 브랜치의 내용을 원격 저장소의 main브랜치에 병합하고자 pr을 보냈을때 충돌이 일어났음을 보여준다. 풀리퀘스트 생성 전과 후에 모두 충돌이 일어났음을 github에서 미리 알려주고 있다. 어떻게 충돌을 해결하는가 변경사항이 있는 원격저장소의 branch를 로컬로 다운 받고 병합하여 수정 후 다시 add와 commit, push를 수행하면 된다. 변경사항이 있는 원격저장소의 branch를 가져오는 방법은 두 가지가 있다. fetch와 merge fetch 명령어를 입력하면 FETCH_HEAD 라는 임시 브랜치에 원격저장소의 브랜치의 변경사항이 저장된다. 현재 브랜치에 변경사항을 바로 적용하고 싶지 않을 때 사용하면 된다. FETCH_HEAD에 가져온 내용을 현재 브랜치와 병합하기 위해 merge명령어를 수행한다. git fetch origin 브랜치명 git merge FETCH_HEAD pull pull 명령어는 fetch와 merge 명령어를 수행한 것과 같다. merge를 자동으로 하고 싶을 때 사용하면 된다. git pull origin 브랜치명 위의 두가지 방법 중 하나로 병합을 하고 파일을 열면 변경사항이 파일에 표시된다. 로컬저장소에서 작성한 부분과 원격 저장소에서 작성한 부분을 구분하는 부분이 아래와 같이 표시된다. 적절히 변경한 후 저장하면 된다. 파일이 변경되었기 때문에 바로 push하는 것이 아니라 add와 commit을 하고 push하면 충돌이 해결된다. PR에서도 아래와 같이 바뀌면 충돌이 해결된 것이다. PR에서의 충돌을 해결할 때 짚고 넘어가야 하는 것은 main브랜치의 변경 사항을 받아왔다고 해서 main에 다시 push하는 것이 아니라는 것이다. 원격 저장소의 하위 브랜치에서 main으로 병합을 요청한 상태이니 하위 브랜치로 push해야한다. 풀리 퀘스트를 사용하지 않고 하위 브랜치 따위가 상위 브랜치에 뭔가를 올리려고 하지말자</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">혼자하는 Git/Github 전체적인 흐름 알아보기 - 상</title>
      <link href="http://localhost:4000/git_alone_1" rel="alternate" type="text/html" title="혼자하는 Git/Github 전체적인 흐름 알아보기 - 상" />
      <published>2021-07-31T09:00:01+09:00</published>
      <updated>2021-07-31T09:00:01+09:00</updated>
      <id>http://localhost:4000/git_alone_1</id>
      <content type="html" xml:base="http://localhost:4000/git_alone_1">&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt;Git/Github &lt;/span&gt;&lt;/p&gt;

&lt;p class=&quot;postListBtn&quot; style=&quot;margin-top: -30px;&quot;&gt; 글 목록 펼치기&lt;/p&gt;

&lt;ul class=&quot;table-of-contents-list&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;/git_alone_1&quot;&gt; [혼자하는 Git/Github] 전체적인 흐름 알아보기 - 상&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;/git_alone_2&quot;&gt; [혼자하는 Git/Github] 전체적인 흐름 알아보기 - 하&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;/git_alone_example&quot;&gt; [혼자하는 Git/Github] 전체적인 흐름 알아보기 - 예시&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;/git_withTeam&quot;&gt; [함께하는 Git/Github] 팀원과 프로젝트 함께하기&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;script src=&quot;/assets/js/postListBtn.js&quot;&gt;&lt;/script&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;모두가 다음과 같은 흐름으로 작업을 하지 않으며 개인의 작업 흐름을 정리해둔 글입니다&lt;/li&gt;
    &lt;li&gt;git/github 사용의 전체적인 흐름을 파악하고 이해해보는 것이 목표입니다&lt;/li&gt;
    &lt;li&gt;이 글은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;나의 원격 저장소&lt;/code&gt;와 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;로컬 저장소&lt;/code&gt;만을 다룹니다.&lt;/li&gt;
    &lt;li&gt;git 명령어들을 이해하고 있다는 가정하에 작성한 것입니다.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;윈도우 환경에서 실습을 진행&lt;/li&gt;
    &lt;li&gt;vim 으로 커밋 메세지를 작성&lt;/li&gt;
    &lt;li&gt;CLI 환경만 이용&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;!-- excerpt-start --&gt;

&lt;h2 id=&quot;전체적인-흐름&quot;&gt;전체적인 흐름&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://images.velog.io/images/0mi/post/425eb029-16f9-40ac-9e5d-d18014caa57b/image.png&quot; /&gt;&lt;a href=&quot;https://images.velog.io/images/0mi/post/425eb029-16f9-40ac-9e5d-d18014caa57b/image.png&quot; target=&quot;_blank&quot;&gt; 이미지 크게 보기&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;이 글에선 원격 저장소에 branch를 푸시하는 4번까지의 과정을 설명합니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;1-원격-저장소를-로컬에-복제하기--clone&quot;&gt;1. 원격 저장소를 로컬에 복제하기 : clone&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://images.velog.io/images/0mi/post/c3ecb1ff-16d4-442a-94ce-64b7d4faa297/image.png&quot; alt=&quot;clone의 흐름&quot; /&gt;&lt;a href=&quot;https://images.velog.io/images/0mi/post/c3ecb1ff-16d4-442a-94ce-64b7d4faa297/image.png&quot; target=&quot;_blank&quot;&gt;이미지 크게 보기&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;작업 초기에 가장 먼저 실행하는 작업이며 나의 경우 로컬에서의 작업 내역이 아예 없을 때 사용한다. &lt;span style=&quot;color:gray&quot;&gt;로컬에서 로컬저장소를 만들고(git init) 원격저장소와 연결하는 것(git remote add origin github주소 )보다 입력할 명령어가 적기 때문에 실수할 일이 거의 없어 주로 사용한다.&lt;/span&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;github에서 생성한 저장소를 내 컴퓨터에 가져오기 위해 저장소를 가져올 폴더에서 git bash 창을 열어 아래 명령을 입력한다.
    &lt;blockquote&gt;
      &lt;p&gt;&lt;span style=&quot;color:red&quot;&gt;git clone&lt;/span&gt; &lt;span style=&quot;color:blue&quot;&gt;github주소&lt;/span&gt;&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;위의 명령어를 치고 bash명령어를 실행했던 폴더를 가보면 원격저장소 이름과 동일한 폴더가 생성되어있을 것이다. 그 폴더 안에 .git폴더가 있다면 로컬저장소가 생긴 것이다.(숨김 해제를 해야 보인다)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;위의 내용대로 실행했다며 현재 bash창을 열었던 폴더에서 생성된 저장소 폴더로 이동하는 과정도 빼트리지 말아야한다. 생성된 저장소 안에서 git bash를 열어도 된다.
    &lt;blockquote&gt;
      &lt;p&gt;&lt;span style=&quot;color:red&quot;&gt;cd&lt;/span&gt; &lt;span style=&quot;color:blue&quot;&gt; 생성된 로컬 저장소 주소(폴더이름) &lt;/span&gt;&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;2-로컬-저장소에-새로운-branch-만들고-이동하기--branch와-checkout&quot;&gt;2. 로컬 저장소에 새로운 branch 만들고 이동하기 : branch와 checkout&lt;/h3&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://images.velog.io/images/0mi/post/3f94f570-27fb-41eb-ae82-587413c051b1/image.png&quot; width=&quot;500px&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://images.velog.io/images/0mi/post/3f94f570-27fb-41eb-ae82-587413c051b1/image.png&quot; target=&quot;_blank&quot;&gt;이미지 크게 보기&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;협업뿐 아니라 개인의 작업을 위해서도 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;가장 중요한 부분&lt;/code&gt;이라고 할 수 있다.&lt;/li&gt;
  &lt;li&gt;새로운 영역을 만들어 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main branch&lt;/code&gt;의 영역을 건들지 않는 작업이다.
&lt;span style=&quot;color:gray&quot;&gt;나의 경우 main branch를 최종의 최종의 최종만 담는 공간이자 나의 사수만 관리하는 공간이라고 생각하며 작업한다. 로컬 저장소에서 main branch로 checkout하는 일이 거의 없다. (혼자 작업하는 경우에도 동일)&lt;/span&gt;
    &lt;blockquote&gt;
      &lt;p&gt;&lt;span style=&quot;color:red&quot;&gt;git branch&lt;/span&gt; &lt;span style=&quot;color:blue&quot;&gt;생성할 브랜치명&lt;/span&gt;&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;이렇게 생성한 브랜치로 이동하기 위해서는 아래의 명령어를 사용한다.
    &lt;blockquote&gt;
      &lt;p&gt;&lt;span style=&quot;color:red&quot;&gt;git checkout&lt;/span&gt; &lt;span style=&quot;color:blue&quot;&gt;이동하고자 하는 브랜치명&lt;/span&gt;&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;3-로컬-저장소에서-작업하고-커밋까지-하기--add와-commit&quot;&gt;3. 로컬 저장소에서 작업하고 커밋까지 하기 : add와 commit&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/images/0mi/post/8fa82677-90f0-4e61-b0d5-f0db1ca7b632/image.png&quot; width=&quot;500px&quot; /&gt; &lt;a href=&quot;https://images.velog.io/images/0mi/post/8fa82677-90f0-4e61-b0d5-f0db1ca7b632/image.png&quot; target=&quot;_blank&quot;&gt;이미지 크게 보기&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;위의 과정을 모두 진행하고 나서는 저장소안에서 자유롭게 작업을 시작하면 되고 항상 잊지말아야 할 것은 현재 브랜치가 어디인지이다.&lt;/li&gt;
  &lt;li&gt;작업을 마치면 add와 commit을 진행한다.
&lt;span style=&quot;color:gray&quot;&gt; add를 이용하여 스테이지에 올린 파일들을 하나의 덩어리로 묶는 것이 commit이다.&lt;/span&gt;&lt;/li&gt;
  &lt;li&gt;아래의 명령어를 이용하여 덩어리로 묶고자하는 파일들을 전부 스테이지에 올린다.
    &lt;blockquote&gt;
      &lt;p&gt;&lt;span style=&quot;color:red&quot;&gt;git add&lt;/span&gt; &lt;span style=&quot;color:blue&quot;&gt;파일명.확장자&lt;/span&gt;&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;add를 통해 스테이지에 올린 파일들을 한 덩어리로 묶는 commit을 실행한다.
    &lt;blockquote&gt;
      &lt;p&gt;&lt;span style=&quot;color:red&quot;&gt;git commit&lt;/span&gt;&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://velog.io/@0mi/Git-%EC%BB%A4%EB%B0%8B-%EB%A9%94%EC%8B%9C%EC%A7%80-%EA%B7%9C%EC%B9%99%EA%B3%BC-%EC%BB%A4%EB%B0%8B-%EC%BB%A8%EB%B2%A4%EC%85%98commit-message-convention%EC%A0%95%EB%A6%AC&quot; target=&quot;_blank&quot;&gt;커밋 메시지 규칙과 커밋 컨벤션 정리&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;4-원격-저장소에-branch-푸시하기--push&quot;&gt;4. 원격 저장소에 branch 푸시하기 : push&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/images/0mi/post/927255f7-60d7-4713-9536-48110179f4c9/image.png&quot; /&gt;&lt;a href=&quot;https://images.velog.io/images/0mi/post/927255f7-60d7-4713-9536-48110179f4c9/image.png&quot; target=&quot;_blank&quot;&gt;이미지 크게 보기&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;로컬 저장소에 쌓인 커밋들을 원격저장소에도 저장하기 위해 push 명령어를 사용한다.
이때 원격 저장소의 main이 아닌 현재 로컬 브랜치와 동일한 이름의 branch에 작업을 올린다.
    &lt;blockquote&gt;
      &lt;p&gt;&lt;span style=&quot;color:red&quot;&gt;git push&lt;/span&gt; origin &lt;span style=&quot;color:blue&quot;&gt;브랜치명&lt;/span&gt;&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git push -u&lt;/code&gt; 옵션을 사용하면 다음 push때 매번 브랜치명을 적지 않고 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git push&lt;/code&gt;명령어만 입력해도 파일들이 자동으로 해당 branch에 저장된다. &lt;span style=&quot;color:gray&quot;&gt;그러나 나의 경우 -u옵션을 사용하고 나서도 확실히하는 차원에서 ‘git push origin 브랜치명’ 을 사용한다.&lt;/span&gt;
    &lt;blockquote&gt;
      &lt;p&gt;&lt;span style=&quot;color:red&quot;&gt;git push -u&lt;/span&gt; origin &lt;span style=&quot;color:blue&quot;&gt;브랜치명&lt;/span&gt;&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>0andme</name>
        
        
      </author>

      

      
        <category term="git-github" />
      

      
        <summary type="html">Git/Github 글 목록 펼치기 [혼자하는 Git/Github] 전체적인 흐름 알아보기 - 상 [혼자하는 Git/Github] 전체적인 흐름 알아보기 - 하 [혼자하는 Git/Github] 전체적인 흐름 알아보기 - 예시 [함께하는 Git/Github] 팀원과 프로젝트 함께하기 모두가 다음과 같은 흐름으로 작업을 하지 않으며 개인의 작업 흐름을 정리해둔 글입니다 git/github 사용의 전체적인 흐름을 파악하고 이해해보는 것이 목표입니다 이 글은 나의 원격 저장소와 로컬 저장소만을 다룹니다. git 명령어들을 이해하고 있다는 가정하에 작성한 것입니다. 윈도우 환경에서 실습을 진행 vim 으로 커밋 메세지를 작성 CLI 환경만 이용 전체적인 흐름 이미지 크게 보기 이 글에선 원격 저장소에 branch를 푸시하는 4번까지의 과정을 설명합니다. 1. 원격 저장소를 로컬에 복제하기 : clone 이미지 크게 보기 작업 초기에 가장 먼저 실행하는 작업이며 나의 경우 로컬에서의 작업 내역이 아예 없을 때 사용한다. 로컬에서 로컬저장소를 만들고(git init) 원격저장소와 연결하는 것(git remote add origin github주소 )보다 입력할 명령어가 적기 때문에 실수할 일이 거의 없어 주로 사용한다. github에서 생성한 저장소를 내 컴퓨터에 가져오기 위해 저장소를 가져올 폴더에서 git bash 창을 열어 아래 명령을 입력한다. git clone github주소 위의 명령어를 치고 bash명령어를 실행했던 폴더를 가보면 원격저장소 이름과 동일한 폴더가 생성되어있을 것이다. 그 폴더 안에 .git폴더가 있다면 로컬저장소가 생긴 것이다.(숨김 해제를 해야 보인다) 위의 내용대로 실행했다며 현재 bash창을 열었던 폴더에서 생성된 저장소 폴더로 이동하는 과정도 빼트리지 말아야한다. 생성된 저장소 안에서 git bash를 열어도 된다. cd 생성된 로컬 저장소 주소(폴더이름) 2. 로컬 저장소에 새로운 branch 만들고 이동하기 : branch와 checkout 이미지 크게 보기 협업뿐 아니라 개인의 작업을 위해서도 가장 중요한 부분이라고 할 수 있다. 새로운 영역을 만들어 main branch의 영역을 건들지 않는 작업이다. 나의 경우 main branch를 최종의 최종의 최종만 담는 공간이자 나의 사수만 관리하는 공간이라고 생각하며 작업한다. 로컬 저장소에서 main branch로 checkout하는 일이 거의 없다. (혼자 작업하는 경우에도 동일) git branch 생성할 브랜치명 이렇게 생성한 브랜치로 이동하기 위해서는 아래의 명령어를 사용한다. git checkout 이동하고자 하는 브랜치명 3. 로컬 저장소에서 작업하고 커밋까지 하기 : add와 commit 이미지 크게 보기 위의 과정을 모두 진행하고 나서는 저장소안에서 자유롭게 작업을 시작하면 되고 항상 잊지말아야 할 것은 현재 브랜치가 어디인지이다. 작업을 마치면 add와 commit을 진행한다. add를 이용하여 스테이지에 올린 파일들을 하나의 덩어리로 묶는 것이 commit이다. 아래의 명령어를 이용하여 덩어리로 묶고자하는 파일들을 전부 스테이지에 올린다. git add 파일명.확장자 add를 통해 스테이지에 올린 파일들을 한 덩어리로 묶는 commit을 실행한다. git commit 커밋 메시지 규칙과 커밋 컨벤션 정리 4. 원격 저장소에 branch 푸시하기 : push 이미지 크게 보기 로컬 저장소에 쌓인 커밋들을 원격저장소에도 저장하기 위해 push 명령어를 사용한다. 이때 원격 저장소의 main이 아닌 현재 로컬 브랜치와 동일한 이름의 branch에 작업을 올린다. git push origin 브랜치명 git push -u 옵션을 사용하면 다음 push때 매번 브랜치명을 적지 않고 git push명령어만 입력해도 파일들이 자동으로 해당 branch에 저장된다. 그러나 나의 경우 -u옵션을 사용하고 나서도 확실히하는 차원에서 ‘git push origin 브랜치명’ 을 사용한다. git push -u origin 브랜치명</summary>
      

      
      
    </entry>
  
</feed>
